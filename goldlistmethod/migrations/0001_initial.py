# Generated by Django 5.0.1 on 2024-02-05 00:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sentence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('foreign_language', models.CharField(max_length=255)),
                ('mother_tongue', models.CharField(max_length=255)),
                ('foreign_idiom', models.CharField(max_length=255)),
                ('mother_idiom', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Sentence',
                'verbose_name_plural': 'Sentences',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('profile', models.CharField(choices=[('A', 'Student'), ('P', 'Professor'), ('G', 'Admin'), ('R', 'Root')], max_length=1)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Pending', 'Pending'), ('Suspended', 'Suspended'), ('Archived', 'Archived'), ('Approved', 'Approved')], default='Pending', max_length=20)),
                ('password2', models.CharField(max_length=128, null=True)),
                ('repeat_password', models.CharField(max_length=128, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=200)),
                ('list_size', models.IntegerField()),
                ('days_period', models.IntegerField()),
                ('foreign_idiom', models.CharField(max_length=100)),
                ('mother_idiom', models.CharField(max_length=100)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notebook_list', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notebook',
                'verbose_name_plural': 'Notebooks',
                'unique_together': {('name', 'user')},
            },
        ),
        migrations.CreateModel(
            name='PageSection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('section_number', models.IntegerField()),
                ('page_number', models.IntegerField()),
                ('_group', models.CharField(choices=[('A', 'HEADLIST'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('NP', 'NP'), ('RM', 'RM')], db_column='group', max_length=2)),
                ('distillation_at', models.DateField(null=True)),
                ('distillated', models.BooleanField(default=False)),
                ('distillation_actual', models.DateField(null=True)),
                ('_translated_sentences', models.TextField(db_column='translated_sentences')),
                ('_memorializeds', models.TextField(db_column='memorializeds')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='goldlistmethod.pagesection')),
                ('notebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_section_list', to='goldlistmethod.notebook')),
            ],
            options={
                'verbose_name': 'Page Section',
                'verbose_name_plural': 'Page Sections',
            },
        ),
        migrations.CreateModel(
            name='PageSectionSentenceAssoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('page', models.IntegerField(blank=True, null=True)),
                ('group', models.CharField(max_length=2)),
                ('memorialized', models.BooleanField(default=False)),
                ('distillated', models.BooleanField(default=False)),
                ('notebook_id', models.IntegerField()),
                ('pagesection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='goldlistmethod.pagesection')),
                ('sentence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='goldlistmethod.sentence')),
            ],
        ),
    ]
